name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ web_app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 scripts/ web_app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test imports and basic functionality
      run: |
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
        python -c "import transformers; print(f'Transformers version: {transformers.__version__}')"
        python -c "import streamlit; print(f'Streamlit version: {streamlit.__version__}')"
    
    - name: Test script syntax
      run: |
        python -m py_compile scripts/working_transcript_downloader.py
        python -m py_compile scripts/tokenizer_and_preprocessor.py
        python -m py_compile scripts/model_fine_tuner.py
        python -m py_compile web_app/lex_chatbot_app.py
    
    - name: Test web app configuration
      run: |
        cd web_app && python -c "
        import streamlit as st
        import sys
        import os
        sys.path.append('../scripts')
        try:
            exec(open('lex_chatbot_app.py').read().replace('st.', 'pass # st.'))
            print('Web app configuration test passed')
        except Exception as e:
            print(f'Web app test failed: {e}')
            sys.exit(1)
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install safety
      run: pip install safety
    
    - name: Check for security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check --json || true

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Check README and docs
      run: |
        # Check if README.md exists and has content
        test -s README.md
        # Check if LICENSE exists
        test -s LICENSE
        # Check if CONTRIBUTING.md exists
        test -s CONTRIBUTING.md
        echo "Documentation check passed"

  structure:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate project structure
      run: |
        # Check for required directories
        test -d scripts
        test -d web_app
        test -d docs
        
        # Check for required files
        test -f requirements.txt
        test -f setup.py
        test -f run_chatbot.sh
        
        # Check for main scripts
        test -f scripts/working_transcript_downloader.py
        test -f scripts/tokenizer_and_preprocessor.py
        test -f scripts/model_fine_tuner.py
        test -f web_app/lex_chatbot_app.py
        
        echo "Project structure validation passed"